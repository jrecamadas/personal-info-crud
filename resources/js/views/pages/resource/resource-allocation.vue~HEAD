<template>
    <div>
        <!-- BEGIN PAGE HEADER -->
        <page-header v-bind:title="title">
            <div class="loading-indicator-container"><i v-show="loading" class="fa fa-spinner fa-spin loading-indicator"></i></div>
            <div class="tooltip-indicator">
                <i v-show="!loading" @click="confirmDialog('Tips', tooltipHints, 'Close', false, sm)" class="fa ks-color-primary fa-info-circle" :title="tooltipHints"></i>
                <span class="show-tooltip">{{tooltipHints}}</span>
            </div>
        </page-header>

        <!-- END PAGE HEADER -->

        <!-- BEGIN PAGE CONTENT -->
        <page-content :pageClass="pageClass">
            <div class="ks-nav-body">
                <div class="ks-nav-body-wrapper">
                    <div class="container-fluid">
                        <!-------- KANBAN BOARD ------- -->
                        <div class="ks-page-content-body ks-projects-kanban-board">
                            <div class="ks-wrapper">

                                <!----------------------------------------------- -->
                                <draggable v-model="projects" class="dragColumnArea" :options="{group:'projects'}" :move="cancelDrag">
                                    <transition-group name="project-group" class="dragColumnAreaTarget ks-wrapper">
                                        <div v-for="project in projects" class="ks-column projects" :class="'ks-'+project.projectcolor" :key="project.projectid">
                                            <div class="ks-header">
                                                <span class="ks-name project-name" title="Double click to edit project name"
                                                      v-show="!project.editmode"
                                                      v-on:dblclick="project.editmode=true;forceFocus(project.projectid+'-input')">
                                                        {{project.projectname}}
                                                </span>
                                                <input class="form-control edit-form-control" :id="project.projectid+'-input'"
                                                       v-if="project.editmode"
                                                       v-model="project.projectname"
                                                       v-on:keyup.enter="project.editmode=false"
                                                       v-on:keyup.esc="project.editmode=false"
                                                       v-on:focus.self="edit_name_focus=true"
                                                       v-on:blur.self="edit_name_focus=false;controlEdit(project)"
                                                />
                                                <div class="dropdown ks-control">
                                                    <a class="btn btn-link ks-no-text" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        <span class="ks-icon la la-ellipsis-h"></span>
                                                    </a>
                                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu1">
                                                        <a class="dropdown-item" href="#" @click="project.editmode=true;forceFocus(project.projectid+'-input')">Edit</a>
                                                        <!--<a v-show="project.projectid!=default_project" class="dropdown-item" href="#" @click="deleteProject(project.projectid,project.projectname)">Delete</a>
                                                        <a class="dropdown-item" href="#" @click="showForm(true)">New Project</a>-->
                                                    </div>
                                                </div>
                                            </div>
                                            <form class="ks-column ks-primary ks-new-list ks-form-box" v-if="project.editmode">
                                                <div class="ks-pick-color ks-column ks-new-list" v-if="project.editmode">
                                                    <div class="ks-header ks-edit-color-text">Click to change color</div>
                                                    <div class="ks-controls ks-edit-box">
                                                        <div v-for="color in newproject.colors" class="custom-control custom-radio ks-radio ks-as-checkbox ks-lg ks-edit-color" :class="'ks-'+color.value">
                                                            <input name="radio" type="radio" class="custom-control-input"
                                                                   v-model="project.projectcolor"
                                                                   :id="color.id"
                                                                   :value="color.value"
                                                                   :checked="color.value==project.projectcolor"
                                                                   v-on:keyup.enter="project.editmode=false"
                                                                   v-on:keyup.esc="project.editmode=false"
                                                                   v-on:focus.self="edit_color_focus=true"
                                                                   v-on:blur.self="edit_color_focus=false;controlEdit(project)"
                                                            >
                                                            <label class="custom-control-label" :for="color.id"></label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </form>
                                            <div class="ks-cards ui-sortable">
                                                <div class="card ks-drop-or-add">Drop card here or <a href="#">Add</a></div>

                                                <draggable v-model="project.assigned" class="dragArea" :options="{group:'developers'}" @end="updateResource" :client_id="project.clientid">
                                                    <transition-group name="dev-group" class="dragAreaTarget">
                                                        <div v-for="assign in project.assigned" class="card panel panel-default" :key="assign.id" :class="assign.class" :resource_id="assign.resource_id">
                                                            <div class="card-header">
                                                                <span class="ks-name ui-sortable-handle">
                                                                    <a :href="'/employee/'+assign.id.split('-')[1]+'/profile'" target="_blank">{{assign.name}}</a> <br />
                                                                    <span class="ks-date resource-position">{{assign.position}}</span>
                                                                </span>
                                                                <div class="dropdown ks-control">
                                                                    <a class="btn btn-link ks-no-text" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                                        <span class="ks-icon la la-angle-down"></span>
                                                                    </a>
                                                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu1">
                                                                        <a class="dropdown-item" target="_blank"
                                                                           :href="'/employee/'+assign.id.split('-')[1]+'/profile'"
                                                                        >Edit</a>
                                                                        <a class="dropdown-item" target="_blank"
                                                                           v-if="assign.card"
                                                                           :href="assign.card"
                                                                        >View Profile Card</a>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="card-block">
                                                                <div align="center" class="resource-details">
                                                                    <span class="resource-show-details"><a @click="detailClicked($event)" href="#!">...</a></span>
                                                                </div>
                                                                <div class="resource-details-content">
                                                                    <div v-if="assign.skills.length" class="ks-controls">
                                                                        <span class="">Skills:</span>
                                                                    </div>

                                                                    <div v-if="assign.skills.length" v-for="skill in assign.skills">
                                                                        <div class="ks-controls resource-skill-placeholder">
                                                                            <span class="resource-skill">{{ skill.skill }}</span>
                                                                            <span class="resource-level">{{ skill.level }}/10</span>
                                                                        </div>
                                                                        <div class="ks-info">
                                                                            <div class="progress ks-progress ks-progress-xs">
                                                                                <div class="progress-bar bg-info" role="progressbar" :style="'width: ' + (skill.level * 10)+ '%'" v-bind:aria-valuenow="skill.level" aria-valuemin="0" aria-valuemax="100"></div>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                    <div v-if="assign.shift.length" class="ks-footer resource-workshift">
                                                                    <span class="ks-controls">
                                                                        <span class="la la-clock-o ks-icon"></span>
                                                                        <span class="ks-amount">Work Shift:</span>
                                                                    </span>
                                                                    </div>
                                                                    <div v-if="assign.shift.length">
                                                                        <div v-for="shift in assign.shift" class="ks-footer resource-workshift-time">
                                                                        <span class="resource-workshift-time">
                                                                            <span>{{ shift.place }}</span>
                                                                            <span class="time-right">{{ shift.start + ' - ' + shift.end + ' ' + shift.timezone }}</span>
                                                                        </span>
                                                                        </div>
                                                                    </div>
                                                                    <div class="ks-footer resource-profile-card">
                                                                    <span class="ks-users">
                                                                        <a v-if="assign.card" :href="assign.card" target="_blank">
                                                                            <img :src="assign.photo" class="ks-avatar" width="24" height="24">
                                                                            <span class="ks-amount">Profile Card</span>
                                                                        </a>
                                                                    </span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </transition-group>
                                                </draggable>

                                            </div>
                                        </div>
                                    </transition-group>
                                </draggable>
                                <!----------------------------------------------- -->
                            </div>
                        </div>
                        <!------ END KANBAN BOARD ----- -->
                    </div>
                </div>
            </div>
        </page-content>
        <!-- END PAGE CONTENT -->

        <select-project-modal
                v-if="open"
                :resource_data="resource_data"
                :assigned_resources="assigned_resources"
                :openModal="open"
                @success="updated"
                @close="cancelled(false)">
        </select-project-modal>

    </div>
</template>

<style lang="scss" scoped>
    .show-tooltip{
        font-size: 13px;
        position: relative;
        top: -3px!important;
        padding-left: 20px!important;
    }
    .tooltip-indicator{
        position: absolute;
        left: 215px;
        font-size: 23px!important;
        cursor: pointer;
    }
    .loading-indicator-container{
        position: absolute!important;
        float: left!important;
        display: inline!important;
        left: 220px!important;
    }
    .loading-indicator{
        position: relative;
        z-index: 2!important;
    }
    .card-block{
        padding-bottom: 0px!important;
    }
    .resource-details-content{
        display: none;
        padding-bottom: 12px;
    }
    .resource-details{
        font-size: 20px;
        top: -28px!important;
        position: relative;
        margin-bottom: auto;
        height: 8px;
    }
    .resource-workshift{
        padding-top: 12px;
    }
    .resource-workshift-time{
        padding-top: 5px;
        font-size: 8pt;
        .time-left{
            color: #444;
        }
        .time-right{
            font-size: 7.5pt;
            color: #777;
            float: right;
        }
    }
    .resource-profile-card{
        font-size: 8pt;
        color: #444!important;
        padding-top: 12px!important;
    }
    .resource-skill-placeholder{
        padding-top: 4px;
    }
    .resource-skill{
        font-size: 8pt;
        color: #444!important;
    }
    .resource-level{
        font-size: 8pt;
        float: right;
        padding-top: 4px !important;
        color: #777!important;
    }
    .resource-position-placeholder{
        position: absolute;
        padding-left: 20px;
        top: 45px;
    }
    .resource-position{
        font-size: 7.5pt !important;
        font-weight: 400 !important;
        color: #555;
    }
    .dragColumnAreaTarget > div:nth-child(1){
        position: sticky;
        margin-left: 0%!important;
        left: 260px!important;
        z-index: 1;
    }
    .ks-projects-kanban-board .ks-wrapper > .ks-column form{
        margin: 0px!important;
    }
    form > div.ks-pick-color.ks-column.ks-new-list{
        width: 224px !important;
        min-width: 224px!important;
        border-radius: 2px !important;
        margin-right: 0px !important;
        align-self: flex-start !important;
        height: auto !important;
        padding: 0px !important;
        margin-left: 0px!important;
    }

    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-primary{ border-top:4px solid #25628F !important; background-color: #f5f6fa!important; }
    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-success{ border-top:4px solid #4caf50 !important; background-color: #f5fcf8!important; }
    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-info{ border-top:4px solid #42a5f5 !important; background-color: #f4fbfe!important; }
    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-purple{ border-top:4px solid #cb48bb !important; background-color: #fdf6fd!important; }
    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-warning{ border-top:4px solid #ffb300 !important; background-color: #fdfcf3!important; }
    .ks-projects-kanban-board .ks-wrapper .dragColumnAreaTarget.ks-wrapper > div.ks-danger{ border-top:4px solid #ef5350 !important; background-color: #fef7f6!important; }

    .ks-projects-kanban-board span.ks-wrapper{
        display: flex!important;
    }

    .ks-projects-kanban-board .ks-wrapper div.ks-column{
        width: 265px!important;
        min-width: 265px!important;
        border-radius: 2px!important;
        margin-right: 30px!important;
        align-self: flex-start!important;
        height: auto!important;
        padding: 20px!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-cards{
        margin-top: 18px!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-header{
        display: flex!important;;
        -webkit-box-pack: justify!important;;
        justify-content: space-between!important;;
        -webkit-box-align: center!important;;
        align-items: center!important;;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-header .ks-name{
        font-size: 14px!important;
        font-weight: 500!important;
        cursor: pointer!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-header > .ks-control > .btn-link{
        height: auto!important;
        margin: 0!important;
        width: auto!important;
        color: #333!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-header > .ks-control > .btn-link.ks-no-text > .ks-icon{
        height: auto!important;
        width: auto!important;
        padding: 0!important;
        font-size: 24px!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-primary > .ks-cards > .card.ks-drop-or-add{border-color: #b0b9d7!important;}
    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-success > .ks-cards > .card.ks-drop-or-add{border-color: #abebc6!important;}
    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-info    > .ks-cards > .card.ks-drop-or-add{border-color: #a6dbf9!important;}
    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-purple  > .ks-cards > .card.ks-drop-or-add{border-color: #edb6ec!important;}
    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-warning > .ks-cards > .card.ks-drop-or-add{border-color: #f2e49e!important;}
    .ks-projects-kanban-board span.ks-wrapper .ks-column.ks-danger  > .ks-cards > .card.ks-drop-or-add{border-color: #f7c1b7!important;}

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-cards > .card.ks-drop-or-add{
        display: none!important;
        text-align: center!important;
        background: transparent!important;
        padding: 15px!important;
        border-style: dashed!important;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-cards > .card.ks-drop-or-add > a{
        color: #333;
        font-weight: 500;
    }

    .ks-projects-kanban-board span.ks-wrapper .ks-column > .ks-cards > .card{
        margin: 0 0 12px 0!important;
        border: 1px solid #e1e5f0!important;
    }

    /************************************************************/
    .ks-form-box{
        margin-top:24px!important;
    }
    .ks-edit-box{
        justify-content: space-between;
        display: flex;
        -webkit-box-pack: justify;
    }
    .ks-edit-color-text{
        margin-top: 15px!important;
    }
    .ks-edit-color{
        position: relative;
        display: inline-block;
        margin-top: 12px;
    }

    .edit-form-control{
        height:26px!important;
    }
    .ks-page-content-body{
        padding-top: 0px!important;
        margin-top: 0px!important;
    }
    .developers{
        transition: all 250ms !important;
        margin-top: 10px!important;
    }
    .projects{
        cursor: move;
    }
    .dragAreaTarget{
        min-height:173px!important;
        display:block;
        position:relative;
        cursor:grab;
    }
    .la-angle-down{
        font-size:11px!important;
        height: 15px!important;
        width: 100px!important;
    }
    .transition-enter-active{
        transition: 500ms !important;
    }
    .dev-group-leave-active{
        display:none!important;
    }

    /** Color Selection positioning and fixes **/
    .ks-radio.ks-as-checkbox.ks-lg > .custom-control-label{
        left:3px!important;
    }
    .custom-control-label::before{
        left:0px!important;
    }
    .ks-radio.ks-as-checkbox > .custom-control-input:checked ~ .custom-control-label:before{
        z-index:1!important;
        top:-2px!important;
    }
    .ks-radio.ks-as-checkbox.ks-lg > .custom-control-input:checked ~ .custom-control-label:before{
        left:-3px!important;
    }
    .custom-radio > .custom-control-input:checked ~ .custom-control-label:after{
        position:relative!important;
        display:block!important;
        position:absolute!important;
        top:0px!important;
        left:0px!important;
    }
    .custom-control-label{
        cursor:pointer;
    }
</style>

<script>

import SelectProjectModal from '@views/pages/resource/_modals/select-project.vue';
import { ClientProject } from '@common/model/ClientProject';
import { EmployeeClientProject } from '@common/model/EmployeeClientProject';
import PageHeader from '@components/page-header.vue';
import PageContent from '@components/page-content.vue';
import EDBMixin from '@common/mixin/EDBMixin';
import AlertMixin from '@common/mixin/AlertMixin';
import StringHelperMixin from '@common/mixin/StringHelperMixin';
import ResourceAllocationMixin from '@common/mixin/ResourceAllocationMixin';
import Draggable from 'vuedraggable';
import jQuery from 'jquery';
import { mapGetters, mapActions } from 'vuex';

export default {
    data(){
        return {
            tooltipHints: 'A Client\'s column is added once the client is set to active, contract is signed, initial deposit is made, and a project is added in the Client Management page.',
            title: 'Resource Allocation',
            open: false,
            pageClass: 'ks-profile',
            loading: true,
            projects: [],//This is the columns
            default_project: 'resources',
            edit_name_focus: false,
            edit_color_focus: false,
            include: [
                'positions',
                'shift',
                'photo',
                'skills',
                'user'
            ],
            resource_data: {
                resource_id: '',
                fromClient: '',
                toClient: '',
                clientProjects: []
            }
        }
    },
    computed: {
        ...mapGetters({
            clients: 'clients/data',
            assigned_resources: 'employeeClientProjects/data',
            searched_resource: 'employeeClientProjects/resource',
            employees: 'employees/data'
        }),
        valid: function() {
            return  !this.isEmpty(this.newproject.name) && !this.isEmpty(this.newproject.selected);
        }
    },
    async created() {
        this.edbFadeElement("span.show-tooltip",15000, 2000);
        this.enableLoading(true);
        this.initForm();
        await this.getEmployees({ query: { take: 99999999, include: this.include.join(',') } });
        await this.getClients({query: {}});
        await this.getResources({query: {}});
        await this.loadColumns();
        await this.initializeResources();

        this.enableLoading(false);
    },
    methods: {
        ...mapActions({
            getClients: 'clients/getClients',
            getResources: 'employeeClientProjects/getResources',
            saveResource: 'employeeClientProjects/saveResource',
            deleteResource: 'employeeClientProjects/deleteResource',
            searchResource: 'employeeClientProjects/searchResource',
            getEmployees: 'employees/getEmployees',
        }),
        loadColumns(){
            let projects = [];
            projects.push({
                clientid: 'resources',
                projectid: 'resources',
                projectname: 'Available Resources',
                projectcolor: 'success',
                editmode: false,
                assigned: []
            });

            this.clients.forEach((client) => {
                if(client.initial_deposit && client.contract_signed && client.projects.data.length){
                    projects.push({
                        clientid: client.id,
                        projectid: 'prj-' + client.id, // Temporarily set like this. They only want to see column as client, not per unique project
                        projectname: client.company,
                        projectcolor: 'info',
                        editmode: false,
                        assigned: []
                    });
                }
            });
            this.projects = projects;
        },
        initializeResources(){
            this.projects.forEach((client) => {
                this.loadResources(client.projectid);
            });
        },
        loadResources(projectId){ /** projectid or the data structure or the clientid **/
            let resourceNode = this.getColumnNode(projectId);
            let resources = [];

            if(projectId === 'resources'){
                resources = this.employees.filter(obj =>
                    !this.isInAssignedResources(obj.id, this.assigned_resources) &&
                    this.isAllowedResource(obj)
                );
            } else {
                resources = this.getResourcesFromClient(resourceNode.clientid);
            }

            resources.forEach((resource) => {
                resourceNode.assigned.push({
                    id: "resource-"+resource.id,
                    resource_id: resource.id,
                    class: "developers",
                    name: resource.first_name + ' ' + resource.last_name,
                    shift: this.getResourceShifts(resource),
                    skills: this.getResourceSkills(resource),
                    position: this.getResourcePosition(resource),
                    photo: this.getResourcePhoto(resource),
                    card: this.getResourceProfileCardURL(resource)
                });
            });
        },
        getResourcesFromClient(clientId){
            let resources = [];
            let assignedResources = [];
            let assignedResourcesIds = [];
            let projectIds = [];
            let projects = this.getClientProjects(clientId, this.clients);

            if(projects.length > 0){
                projects.forEach((project) => {
                    projectIds.push(project.id);
                });
                assignedResources = this.assigned_resources.filter(obj => this.inArray(obj.client_project_id,projectIds));
                if(assignedResources.length > 0){
                    assignedResources.forEach((res) => {
                        assignedResourcesIds.push(res.employee_id);
                    });
                    resources = this.employees.filter(obj => this.inArray(obj.id,assignedResourcesIds));
                }
            }
            return resources;
        },
        initForm(){
            let $ = jQuery;
            $(document).ready(function(){
                $("form .custom-control > .custom-control-label").each(function(){
                    $(this).click(function(){
                        let color = $(this).parent().find("input").val();
                        $("form.ks-new-list").attr('class','ks-column ks-new-list ks-'+color);
                    });
                });
            });
        },
        forceFocus(id){
            let $ = jQuery;
            setTimeout(function(){
                $("#"+id).select();
            },50);
        },
        controlEdit(obj){
            let self = this;
            setTimeout(function(){
                if(!self.edit_name_focus && !self.edit_color_focus){
                    obj.editmode=false;
                }
            },100);
        },
        cancelDrag: function(evt){
            return evt.draggedContext.element.projectid != this.default_project && evt.relatedContext.element.projectid != this.default_project;
        },
        updateResource: function(evt){
            let confirmTransfer = true;
            this.enableLoading(true);
            /**
             * Meant to be here, the evt immediately gets null when you missed the dragging of card to the destination
             */
            if(!evt.item || !evt.from || !evt.to || !evt){ return false; }

            let resource_id = evt.item.attributes.resource_id.value;
            let fromClient = evt.from.parentElement.attributes.client_id.value;
            let toClient = evt.to.parentElement.attributes.client_id.value;
            let clientProjects = this.getClientProjects(toClient,this.clients);

            /**
             *  Meant to be here also, the evt will be nulled while you are dragging outside both containers and
             *  just drop to non-draggable place or outside draggalble area. Including the behavior of nulling
             *  the evt externally by the framework while the above 4 lines of code are in progress.
             */
            if(!evt.item || !evt.from || !evt.to || !evt){ return false; }
            if(clientProjects.length > 1){ confirmTransfer = false; }

            this.executeDraggedResource(resource_id, fromClient, toClient, clientProjects).then((success) => {
                if(success){
                    console.log("Sync update successfully.");
                }else{
                    console.log("Sync update failed.");
                }
            });
            return confirmTransfer;
        },
        async executeDraggedResource(resource_id, fromClient, toClient, clientProjects){
            let self = this;
            let success = false;

            /** resources to client **/
            if(toClient === 'resources'){
                let record = this.assigned_resources.filter(obj => obj.employee_id == resource_id);
                if(record && record[0]){
                    await this.deleteResource(parseInt(record[0].id)).then((res) => {
                        self.enableLoading(false);
                        success = true;
                    }).catch((err) => {
                        console.log(err,"__ERROR__");
                    });
                    await this.getResources();
                }
                self.enableLoading(false);

            }else if(clientProjects.length === 1){
                if(fromClient === 'resources'){
                    await this.searchResource(resource_id).then((res) => { /** Search including those trashed */
                        if(self.searched_resource.length > 0){
                            self.updateDraggedResource(
                                parseInt(self.searched_resource[0].id),
                                parseInt(self.searched_resource[0].employee_id),
                                parseInt(clientProjects[0].id)
                            );
                            success = true;
                        } else {
                            self.updateDraggedResource('', parseInt(resource_id), parseInt(clientProjects[0].id));
                            success = true;
                        }
                    });
                    await this.getResources();
                    self.enableLoading(false);

                } else { /** Client to client resource update **/
                    let record = this.assigned_resources.filter(obj => obj.employee_id == resource_id);
                    if(record && record[0]){
                        await this.updateDraggedResource(
                            record[0].id,
                            parseInt(resource_id),
                            parseInt(clientProjects[0].id)
                        ).then((res) => {
                            self.enableLoading(false);
                            success = true;
                        });
                    }
                }

            } else { /** Client detected it has multiple projects */
                let record = this.assigned_resources.filter(obj => obj.employee_id == resource_id);
                this.resource_data = {
                    resource_id: resource_id,
                    fromClient: fromClient,
                    toClient: toClient,
                    clientProjects: clientProjects
                };
                this.open = true;
                self.enableLoading(false);
            }
            return success;
        },
        updateDraggedResource(id, employee_id, project_id){
            return this.saveResource({
                id: id,
                employee_id: employee_id,
                client_project_id: project_id,
                deleted_at: null
            });
        },
        async enableLoading(bool){
            this.loading = bool;
        },

        async updated(){
            this.enableModal(false);
        },
        async cancelled(){
            this.enableModal(false);
        },
        async enableModal(flag){
            if(!flag){
                await this.getEmployees({ query: { take: 99999999, include: this.include.join(',') } });
                await this.getClients({query: {}});
                await this.getResources({query: {}});
                await this.loadColumns();
                await this.initializeResources();
            }
            this.open = flag;
        }
        ///////////////////////// BELOW METHODS TO BE CONVERTED INTO STORE /////////////////////////
    },
    components: {
        Draggable,
        PageHeader,
        PageContent,
        SelectProjectModal
    },
    mixins:[
        EDBMixin,
        AlertMixin,
        StringHelperMixin,
        ResourceAllocationMixin
    ]
}
</script>